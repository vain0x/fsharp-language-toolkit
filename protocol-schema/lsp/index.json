{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "ApplyWorkspaceEditParams": {
            "description": "The parameters passed via a apply workspace edit request.",
            "properties": {
                "edit": {
                    "$ref": "#/definitions/WorkspaceEdit",
                    "description": "The edits to apply."
                },
                "label": {
                    "description": "An optional label of the workspace edit. This label is\npresented in the user interface for example on an undo\nstack to undo the workspace edit.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ApplyWorkspaceEditResponse": {
            "description": "A response returned from the apply workspace edit request.",
            "properties": {
                "applied": {
                    "description": "Indicates whether the edit was applied or not.",
                    "type": "boolean"
                },
                "failedChange": {
                    "description": "Depending on the client's failure handling strategy `failedChange` might\ncontain the index of the change that failed. This property is only available\nif the client signals a `failureHandlingStrategy` in its client capabilities.",
                    "type": "number"
                },
                "failureReason": {
                    "description": "An optional textual description for why the edit was not applied.\nThis may be used by the server for diagnostic logging or to provide\na suitable error for a request that triggered the edit.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ClientCapabilities": {
            "allOf": [
                {
                    "$ref": "#/definitions/_ClientCapabilities"
                },
                {
                    "$ref": "#/definitions/WorkspaceFoldersClientCapabilities"
                },
                {
                    "$ref": "#/definitions/ConfigurationClientCapabilities"
                },
                {
                    "$ref": "#/definitions/WorkDoneProgressClientCapabilities"
                }
            ]
        },
        "CodeActionClientCapabilities": {
            "description": "The Client Capabilities of a [CodeActionRequest](#CodeActionRequest).",
            "properties": {
                "codeActionLiteralSupport": {
                    "description": "The client support code action literals as a valid\nresponse of the `textDocument/codeAction` request.",
                    "properties": {
                        "codeActionKind": {
                            "description": "The code action kind is support with the following value\nset.",
                            "properties": {
                                "valueSet": {
                                    "description": "The code action kind values the client supports. When this\nproperty exists the client also guarantees that it will\nhandle values outside its set gracefully and falls back\nto a default value when unknown.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "dynamicRegistration": {
                    "description": "Whether code action supports dynamic registration.",
                    "type": "boolean"
                },
                "isPreferredSupport": {
                    "description": "Whether code action supports the `isPreferred` property.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "CodeActionContext": {
            "description": "Contains additional diagnostic information about the context in which\na [code action](#CodeActionProvider.provideCodeActions) is run.\nThe CodeActionContext namespace provides helper functions to work with\n[CodeActionContext](#CodeActionContext) literals.",
            "properties": {
                "diagnostics": {
                    "description": "An array of diagnostics known on the client side overlapping the range provided to the\n`textDocument/codeAction` request. They are provied so that the server knows which\nerrors are currently presented to the user for the given range. There is no guarantee\nthat these accurately reflect the error state of the resource. The primary parameter\nto compute code actions is the provided range.",
                    "items": {
                        "$ref": "#/definitions/Diagnostic"
                    },
                    "type": "array"
                },
                "only": {
                    "description": "Requested kind of actions to return.\n\nActions not of this kind are filtered out by the client before being shown. So servers\ncan omit computing them.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "CodeActionOptions": {
            "description": "Provider options for a [CodeActionRequest](#CodeActionRequest).",
            "properties": {
                "codeActionKinds": {
                    "description": "CodeActionKinds that this server may return.\n\nThe list of kinds may be generic, such as `CodeActionKind.Refactor`, or the server\nmay list out every specific kind they provide.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "CodeActionParams": {
            "description": "The parameters of a [CodeActionRequest](#CodeActionRequest).",
            "properties": {
                "context": {
                    "$ref": "#/definitions/CodeActionContext",
                    "description": "Context carrying additional information."
                },
                "partialResultToken": {
                    "description": "An optional token that a server can use to report partial results (e.g. streaming) to\nthe client.",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "range": {
                    "$ref": "#/definitions/Range",
                    "description": "The range for which the command was invoked."
                },
                "textDocument": {
                    "$ref": "#/definitions/TextDocumentIdentifier",
                    "description": "The document in which the command was invoked."
                },
                "workDoneToken": {
                    "description": "An optional token that a server can use to report work done progress.",
                    "type": [
                        "string",
                        "number"
                    ]
                }
            },
            "type": "object"
        },
        "CodeActionRegistrationOptions": {
            "description": "Registration options for a [CodeActionRequest](#CodeActionRequest).",
            "properties": {
                "codeActionKinds": {
                    "description": "CodeActionKinds that this server may return.\n\nThe list of kinds may be generic, such as `CodeActionKind.Refactor`, or the server\nmay list out every specific kind they provide.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "documentSelector": {
                    "description": "A document selector to identify the scope of the registration. If set to null\nthe document selector provided on the client side will be used.",
                    "items": {
                        "anyOf": [
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "CodeLensClientCapabilities": {
            "description": "The client capabilities  of a [CodeLensRequest](#CodeLensRequest).",
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether code lens supports dynamic registration.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "CodeLensOptions": {
            "description": "Code Lens provider options of a [CodeLensRequest](#CodeLensRequest).",
            "properties": {
                "resolveProvider": {
                    "description": "Code lens has a resolve provider as well.",
                    "type": "boolean"
                },
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "CodeLensParams": {
            "description": "The parameters of a [CodeLensRequest](#CodeLensRequest).",
            "properties": {
                "partialResultToken": {
                    "description": "An optional token that a server can use to report partial results (e.g. streaming) to\nthe client.",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "textDocument": {
                    "$ref": "#/definitions/TextDocumentIdentifier",
                    "description": "The document to request code lens for."
                },
                "workDoneToken": {
                    "description": "An optional token that a server can use to report work done progress.",
                    "type": [
                        "string",
                        "number"
                    ]
                }
            },
            "type": "object"
        },
        "CodeLensRegistrationOptions": {
            "description": "Registration options for a [CodeLensRequest](#CodeLensRequest).",
            "properties": {
                "documentSelector": {
                    "description": "A document selector to identify the scope of the registration. If set to null\nthe document selector provided on the client side will be used.",
                    "items": {
                        "anyOf": [
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "resolveProvider": {
                    "description": "Code lens has a resolve provider as well.",
                    "type": "boolean"
                },
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "CompletionClientCapabilities": {
            "description": "Completion client capabilities",
            "properties": {
                "completionItem": {
                    "description": "The client supports the following `CompletionItem` specific\ncapabilities.",
                    "properties": {
                        "commitCharactersSupport": {
                            "description": "Client supports commit characters on a completion item.",
                            "type": "boolean"
                        },
                        "deprecatedSupport": {
                            "description": "Client supports the deprecated property on a completion item.",
                            "type": "boolean"
                        },
                        "documentationFormat": {
                            "description": "Client supports the follow content formats for the documentation\nproperty. The order describes the preferred format of the client.",
                            "items": {
                                "enum": [
                                    "markdown",
                                    "plaintext"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "preselectSupport": {
                            "description": "Client supports the preselect property on a completion item.",
                            "type": "boolean"
                        },
                        "snippetSupport": {
                            "description": "Client supports snippets as insert text.\n\nA snippet can define tab stops and placeholders with `$1`, `$2`\nand `${3:foo}`. `$0` defines the final tab stop, it defaults to\nthe end of the snippet. Placeholders with equal identifiers are linked,\nthat is typing in one will update others too.",
                            "type": "boolean"
                        },
                        "tagSupport": {
                            "description": "Client supports the tag property on a completion item. Clients supporting\ntags have to handle unknown tags gracefully. Clients especially need to\npreserve unknown tags when sending a completion item back to the server in\na resolve call.",
                            "properties": {
                                "valueSet": {
                                    "description": "The tags supported by the client.",
                                    "items": {
                                        "enum": [
                                            1
                                        ],
                                        "type": "number"
                                    },
                                    "type": "array"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "completionItemKind": {
                    "properties": {
                        "valueSet": {
                            "description": "The completion item kind values the client supports. When this\nproperty exists the client also guarantees that it will\nhandle values outside its set gracefully and falls back\nto a default value when unknown.\n\nIf this property is not present the client only supports\nthe completion items kinds from `Text` to `Reference` as defined in\nthe initial version of the protocol.",
                            "items": {
                                "enum": [
                                    1,
                                    10,
                                    11,
                                    12,
                                    13,
                                    14,
                                    15,
                                    16,
                                    17,
                                    18,
                                    19,
                                    2,
                                    20,
                                    21,
                                    22,
                                    23,
                                    24,
                                    25,
                                    3,
                                    4,
                                    5,
                                    6,
                                    7,
                                    8,
                                    9
                                ],
                                "type": "number"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                "contextSupport": {
                    "description": "The client supports to send additional context information for a\n`textDocument/completion` requestion.",
                    "type": "boolean"
                },
                "dynamicRegistration": {
                    "description": "Whether completion supports dynamic registration.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "CompletionContext": {
            "description": "Contains additional information about the context in which a completion request is triggered.",
            "properties": {
                "triggerCharacter": {
                    "description": "The trigger character (a single character) that has trigger code complete.\nIs undefined if `triggerKind !== CompletionTriggerKind.TriggerCharacter`",
                    "type": "string"
                },
                "triggerKind": {
                    "description": "How the completion was triggered.",
                    "enum": [
                        1,
                        2,
                        3
                    ],
                    "type": "number"
                }
            },
            "type": "object"
        },
        "CompletionOptions": {
            "description": "Completion options.",
            "properties": {
                "allCommitCharacters": {
                    "description": "The list of all possible characters that commit a completion. This field can be used\nif clients don't support individual commmit characters per completion item. See\n`ClientCapabilities.textDocument.completion.completionItem.commitCharactersSupport`\n\nIf a server provides both `allCommitCharacters` and commit characters on an individual\ncompletion item the ones on the completion item win.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "resolveProvider": {
                    "description": "The server provides support to resolve additional\ninformation for a completion item.",
                    "type": "boolean"
                },
                "triggerCharacters": {
                    "description": "Most tools trigger completion request automatically without explicitly requesting\nit using a keyboard shortcut (e.g. Ctrl+Space). Typically they do so when the user\nstarts to type an identifier. For example if the user types `c` in a JavaScript file\ncode complete will automatically pop up present `console` besides others as a\ncompletion item. Characters that make up identifiers don't need to be listed here.\n\nIf code complete should automatically be trigger on characters not being valid inside\nan identifier (for example `.` in JavaScript) list them in `triggerCharacters`.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "CompletionParams": {
            "description": "Completion parameters",
            "properties": {
                "context": {
                    "$ref": "#/definitions/CompletionContext",
                    "description": "The completion context. This is only available it the client specifies\nto send this using the client capability `textDocument.completion.contextSupport === true`"
                },
                "partialResultToken": {
                    "description": "An optional token that a server can use to report partial results (e.g. streaming) to\nthe client.",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "position": {
                    "$ref": "#/definitions/Position",
                    "description": "The position inside the text document."
                },
                "textDocument": {
                    "$ref": "#/definitions/TextDocumentIdentifier",
                    "description": "The text document."
                },
                "workDoneToken": {
                    "description": "An optional token that a server can use to report work done progress.",
                    "type": [
                        "string",
                        "number"
                    ]
                }
            },
            "type": "object"
        },
        "CompletionRegistrationOptions": {
            "description": "Registration options for a [CompletionRequest](#CompletionRequest).",
            "properties": {
                "allCommitCharacters": {
                    "description": "The list of all possible characters that commit a completion. This field can be used\nif clients don't support individual commmit characters per completion item. See\n`ClientCapabilities.textDocument.completion.completionItem.commitCharactersSupport`\n\nIf a server provides both `allCommitCharacters` and commit characters on an individual\ncompletion item the ones on the completion item win.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "documentSelector": {
                    "description": "A document selector to identify the scope of the registration. If set to null\nthe document selector provided on the client side will be used.",
                    "items": {
                        "anyOf": [
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "resolveProvider": {
                    "description": "The server provides support to resolve additional\ninformation for a completion item.",
                    "type": "boolean"
                },
                "triggerCharacters": {
                    "description": "Most tools trigger completion request automatically without explicitly requesting\nit using a keyboard shortcut (e.g. Ctrl+Space). Typically they do so when the user\nstarts to type an identifier. For example if the user types `c` in a JavaScript file\ncode complete will automatically pop up present `console` besides others as a\ncompletion item. Characters that make up identifiers don't need to be listed here.\n\nIf code complete should automatically be trigger on characters not being valid inside\nan identifier (for example `.` in JavaScript) list them in `triggerCharacters`.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "CompletionTriggerKind": {
            "enum": [
                1,
                2,
                3
            ],
            "type": "number"
        },
        "ConfigurationClientCapabilities": {
            "properties": {
                "workspace": {
                    "description": "The workspace client capabilities",
                    "properties": {
                        "configuration": {
                            "description": "The client supports `workspace/configuration` requests.",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "CreateFile": {
            "description": "Create file operation.",
            "properties": {
                "kind": {
                    "description": "A create",
                    "enum": [
                        "create"
                    ],
                    "type": "string"
                },
                "options": {
                    "$ref": "#/definitions/CreateFileOptions",
                    "description": "Additional options"
                },
                "uri": {
                    "description": "The resource to create.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CreateFileOptions": {
            "description": "Options to create a file.",
            "properties": {
                "ignoreIfExists": {
                    "description": "Ignore if exists.",
                    "type": "boolean"
                },
                "overwrite": {
                    "description": "Overwrite existing file. Overwrite wins over `ignoreIfExists`",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DeclarationClientCapabilities": {
            "description": "Since 3.14.0",
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether declaration supports dynamic registration. If this is set to `true`\nthe client supports the new `DeclarationRegistrationOptions` return value\nfor the corresponding server capability as well.",
                    "type": "boolean"
                },
                "linkSupport": {
                    "description": "The client supports additional metadata in the form of declaration links.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DeclarationOptions": {
            "properties": {
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DeclarationRegistrationOptions": {
            "properties": {
                "documentSelector": {
                    "description": "A document selector to identify the scope of the registration. If set to null\nthe document selector provided on the client side will be used.",
                    "items": {
                        "anyOf": [
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "id": {
                    "description": "The id used to register the request. The id can be used to deregister\nthe request again. See also Registration#id.",
                    "type": "string"
                },
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DefinitionClientCapabilities": {
            "description": "Client Capabilities for a [DefinitionRequest](#DefinitionRequest).",
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether definition supports dynamic registration.",
                    "type": "boolean"
                },
                "linkSupport": {
                    "description": "The client supports additional metadata in the form of definition links.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DefinitionOptions": {
            "description": "Server Capabilities for a [DefinitionRequest](#DefinitionRequest).",
            "properties": {
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DefinitionParams": {
            "description": "Parameters for a [DefinitionRequest](#DefinitionRequest).",
            "properties": {
                "partialResultToken": {
                    "description": "An optional token that a server can use to report partial results (e.g. streaming) to\nthe client.",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "position": {
                    "$ref": "#/definitions/Position",
                    "description": "The position inside the text document."
                },
                "textDocument": {
                    "$ref": "#/definitions/TextDocumentIdentifier",
                    "description": "The text document."
                },
                "workDoneToken": {
                    "description": "An optional token that a server can use to report work done progress.",
                    "type": [
                        "string",
                        "number"
                    ]
                }
            },
            "type": "object"
        },
        "DefinitionRegistrationOptions": {
            "description": "Registration options for a [DefinitionRequest](#DefinitionRequest).",
            "properties": {
                "documentSelector": {
                    "description": "A document selector to identify the scope of the registration. If set to null\nthe document selector provided on the client side will be used.",
                    "items": {
                        "anyOf": [
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DeleteFile": {
            "description": "Delete file operation",
            "properties": {
                "kind": {
                    "description": "A delete",
                    "enum": [
                        "delete"
                    ],
                    "type": "string"
                },
                "options": {
                    "$ref": "#/definitions/DeleteFileOptions",
                    "description": "Delete options."
                },
                "uri": {
                    "description": "The file to delete.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DeleteFileOptions": {
            "description": "Delete file options",
            "properties": {
                "ignoreIfNotExists": {
                    "description": "Ignore the operation if the file doesn't exist.",
                    "type": "boolean"
                },
                "recursive": {
                    "description": "Delete the content recursively if a folder is denoted.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "Diagnostic": {
            "description": "Represents a diagnostic, such as a compiler error or warning. Diagnostic objects\nare only valid in the scope of a resource.\nThe Diagnostic namespace provides helper functions to work with\n[Diagnostic](#Diagnostic) literals.",
            "properties": {
                "code": {
                    "description": "The diagnostic's code, which usually appear in the user interface.",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "message": {
                    "description": "The diagnostic's message. It usually appears in the user interface",
                    "type": "string"
                },
                "range": {
                    "$ref": "#/definitions/Range",
                    "description": "The range at which the message applies"
                },
                "relatedInformation": {
                    "description": "An array of related diagnostic information, e.g. when symbol-names within\na scope collide all definitions can be marked via this property.",
                    "items": {
                        "$ref": "#/definitions/DiagnosticRelatedInformation"
                    },
                    "type": "array"
                },
                "severity": {
                    "description": "The diagnostic's severity. Can be omitted. If omitted it is up to the\nclient to interpret diagnostics as error, warning, info or hint.",
                    "enum": [
                        1,
                        2,
                        3,
                        4
                    ],
                    "type": "number"
                },
                "source": {
                    "description": "A human-readable string describing the source of this\ndiagnostic, e.g. 'typescript' or 'super lint'. It usually\nappears in the user interface.",
                    "type": "string"
                },
                "tags": {
                    "description": "Additional metadata about the diagnostic.",
                    "items": {
                        "enum": [
                            1,
                            2
                        ],
                        "type": "number"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "DiagnosticRelatedInformation": {
            "description": "Represents a related message and source code location for a diagnostic. This should be\nused to point to code locations that cause or related to a diagnostics, e.g when duplicating\na symbol in a scope.\nThe DiagnosticRelatedInformation namespace provides helper functions to work with\n[DiagnosticRelatedInformation](#DiagnosticRelatedInformation) literals.",
            "properties": {
                "location": {
                    "$ref": "#/definitions/Location",
                    "description": "The location of this related diagnostic information."
                },
                "message": {
                    "description": "The message of this related diagnostic information.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DidChangeConfigurationClientCapabilities": {
            "properties": {
                "dynamicRegistration": {
                    "description": "Did change configuration notification supports dynamic registration.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DidChangeConfigurationParams": {
            "description": "The parameters of a change configuration notification.",
            "properties": {
                "settings": {
                    "description": "The actual changed settings"
                }
            },
            "type": "object"
        },
        "DidChangeConfigurationRegistrationOptions": {
            "properties": {
                "section": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ]
                }
            },
            "type": "object"
        },
        "DidChangeTextDocumentParams": {
            "description": "The change text document notification's parameters.",
            "properties": {
                "contentChanges": {
                    "description": "The actual content changes. The content changes describe single state changes\nto the document. So if there are two content changes c1 (at array index 0) and\nc2 (at array index 1) for a document in state S then c1 moves the document from\nS to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed\non the state S'.\n\nTo mirror the content of a document using change events use the following approach:\n- start with the same initial content\n- apply the 'textDocument/didChange' notifications in the order you recevie them.\n- apply the `TextDocumentContentChangeEvent`s in a single notification in the order\n   you receive them.",
                    "items": {
                        "anyOf": [
                            {
                                "properties": {
                                    "range": {
                                        "$ref": "#/definitions/Range",
                                        "description": "The range of the document that changed."
                                    },
                                    "rangeLength": {
                                        "description": "The optional length of the range that got replaced.",
                                        "type": "number"
                                    },
                                    "text": {
                                        "description": "The new text for the provided range.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "text": {
                                        "description": "The new text of the whole document.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        ]
                    },
                    "type": "array"
                },
                "textDocument": {
                    "$ref": "#/definitions/VersionedTextDocumentIdentifier",
                    "description": "The document that did change. The version number points\nto the version after all provided content changes have\nbeen applied."
                }
            },
            "type": "object"
        },
        "DidChangeWatchedFilesClientCapabilities": {
            "properties": {
                "dynamicRegistration": {
                    "description": "Did change watched files notification supports dynamic registration. Please note\nthat the current protocol doesn't support static configuration for file changes\nfrom the server side.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DidChangeWatchedFilesParams": {
            "description": "The watched files change notification's parameters.",
            "properties": {
                "changes": {
                    "description": "The actual file events.",
                    "items": {
                        "$ref": "#/definitions/FileEvent"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "DidChangeWatchedFilesRegistrationOptions": {
            "description": "Describe options to be used when registered for text document change events.",
            "properties": {
                "watchers": {
                    "description": "The watchers to register.",
                    "items": {
                        "$ref": "#/definitions/FileSystemWatcher"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "DidCloseTextDocumentParams": {
            "description": "The parameters send in a close text document notification",
            "properties": {
                "textDocument": {
                    "$ref": "#/definitions/TextDocumentIdentifier",
                    "description": "The document that was closed."
                }
            },
            "type": "object"
        },
        "DidOpenTextDocumentParams": {
            "description": "The parameters send in a open text document notification",
            "properties": {
                "textDocument": {
                    "$ref": "#/definitions/TextDocumentItem",
                    "description": "The document that was opened."
                }
            },
            "type": "object"
        },
        "DidSaveTextDocumentParams": {
            "description": "The parameters send in a save text document notification",
            "properties": {
                "text": {
                    "description": "Optional the content when saved. Depends on the includeText value\nwhen the save notification was requested.",
                    "type": "string"
                },
                "textDocument": {
                    "$ref": "#/definitions/VersionedTextDocumentIdentifier",
                    "description": "The document that was closed."
                }
            },
            "type": "object"
        },
        "DocumentColorClientCapabilities": {
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether implementation supports dynamic registration. If this is set to `true`\nthe client supports the new `DocumentColorRegistrationOptions` return value\nfor the corresponding server capability as well.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DocumentColorOptions": {
            "properties": {
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DocumentColorRegistrationOptions": {
            "properties": {
                "documentSelector": {
                    "description": "A document selector to identify the scope of the registration. If set to null\nthe document selector provided on the client side will be used.",
                    "items": {
                        "anyOf": [
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "id": {
                    "description": "The id used to register the request. The id can be used to deregister\nthe request again. See also Registration#id.",
                    "type": "string"
                },
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DocumentFilter": {
            "anyOf": [
                {
                    "properties": {
                        "language": {
                            "description": "A language id, like `typescript`.",
                            "type": "string"
                        },
                        "pattern": {
                            "description": "A glob pattern, like `*.{ts,js}`.",
                            "type": "string"
                        },
                        "scheme": {
                            "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                {
                    "properties": {
                        "language": {
                            "description": "A language id, like `typescript`.",
                            "type": "string"
                        },
                        "pattern": {
                            "description": "A glob pattern, like `*.{ts,js}`.",
                            "type": "string"
                        },
                        "scheme": {
                            "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                {
                    "properties": {
                        "language": {
                            "description": "A language id, like `typescript`.",
                            "type": "string"
                        },
                        "pattern": {
                            "description": "A glob pattern, like `*.{ts,js}`.",
                            "type": "string"
                        },
                        "scheme": {
                            "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "DocumentFormattingClientCapabilities": {
            "description": "Client capabilities of a [DocumentFormattingRequest](#DocumentFormattingRequest).",
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether formatting supports dynamic registration.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DocumentFormattingOptions": {
            "description": "Provider options for a [DocumentFormattingRequest](#DocumentFormattingRequest).",
            "properties": {
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DocumentFormattingParams": {
            "description": "The parameters of a [DocumentFormattingRequest](#DocumentFormattingRequest).",
            "properties": {
                "options": {
                    "$ref": "#/definitions/FormattingOptions",
                    "description": "The format options"
                },
                "textDocument": {
                    "$ref": "#/definitions/TextDocumentIdentifier",
                    "description": "The document to format."
                },
                "workDoneToken": {
                    "description": "An optional token that a server can use to report work done progress.",
                    "type": [
                        "string",
                        "number"
                    ]
                }
            },
            "type": "object"
        },
        "DocumentFormattingRegistrationOptions": {
            "description": "Registration options for a [DocumentFormattingRequest](#DocumentFormattingRequest).",
            "properties": {
                "documentSelector": {
                    "description": "A document selector to identify the scope of the registration. If set to null\nthe document selector provided on the client side will be used.",
                    "items": {
                        "anyOf": [
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DocumentHighlightClientCapabilities": {
            "description": "Client Capabilities for a [DocumentHighlightRequest](#DocumentHighlightRequest).",
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether document highlight supports dynamic registration.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DocumentHighlightOptions": {
            "description": "Provider options for a [DocumentHighlightRequest](#DocumentHighlightRequest).",
            "properties": {
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DocumentHighlightParams": {
            "description": "Parameters for a [DocumentHighlightRequest](#DocumentHighlightRequest).",
            "properties": {
                "partialResultToken": {
                    "description": "An optional token that a server can use to report partial results (e.g. streaming) to\nthe client.",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "position": {
                    "$ref": "#/definitions/Position",
                    "description": "The position inside the text document."
                },
                "textDocument": {
                    "$ref": "#/definitions/TextDocumentIdentifier",
                    "description": "The text document."
                },
                "workDoneToken": {
                    "description": "An optional token that a server can use to report work done progress.",
                    "type": [
                        "string",
                        "number"
                    ]
                }
            },
            "type": "object"
        },
        "DocumentHighlightRegistrationOptions": {
            "description": "Registration options for a [DocumentHighlightRequest](#DocumentHighlightRequest).",
            "properties": {
                "documentSelector": {
                    "description": "A document selector to identify the scope of the registration. If set to null\nthe document selector provided on the client side will be used.",
                    "items": {
                        "anyOf": [
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DocumentLinkClientCapabilities": {
            "description": "The client capabilities of a [DocumentLinkRequest](#DocumentLinkRequest).",
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether document link supports dynamic registration.",
                    "type": "boolean"
                },
                "tooltipSupport": {
                    "description": "Whether the client support the `tooltip` property on `DocumentLink`.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DocumentLinkOptions": {
            "description": "Provider options for a [DocumentLinkRequest](#DocumentLinkRequest).",
            "properties": {
                "resolveProvider": {
                    "description": "Document links have a resolve provider as well.",
                    "type": "boolean"
                },
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DocumentLinkParams": {
            "description": "The parameters of a [DocumentLinkRequest](#DocumentLinkRequest).",
            "properties": {
                "partialResultToken": {
                    "description": "An optional token that a server can use to report partial results (e.g. streaming) to\nthe client.",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "textDocument": {
                    "$ref": "#/definitions/TextDocumentIdentifier",
                    "description": "The document to provide document links for."
                },
                "workDoneToken": {
                    "description": "An optional token that a server can use to report work done progress.",
                    "type": [
                        "string",
                        "number"
                    ]
                }
            },
            "type": "object"
        },
        "DocumentLinkRegistrationOptions": {
            "description": "Registration options for a [DocumentLinkRequest](#DocumentLinkRequest).",
            "properties": {
                "documentSelector": {
                    "description": "A document selector to identify the scope of the registration. If set to null\nthe document selector provided on the client side will be used.",
                    "items": {
                        "anyOf": [
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "resolveProvider": {
                    "description": "Document links have a resolve provider as well.",
                    "type": "boolean"
                },
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DocumentOnTypeFormattingClientCapabilities": {
            "description": "Client capabilities of a [DocumentOnTypeFormattingRequest](#DocumentOnTypeFormattingRequest).",
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether on type formatting supports dynamic registration.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DocumentOnTypeFormattingOptions": {
            "description": "Provider options for a [DocumentOnTypeFormattingRequest](#DocumentOnTypeFormattingRequest).",
            "properties": {
                "firstTriggerCharacter": {
                    "description": "A character on which formatting should be triggered, like `}`.",
                    "type": "string"
                },
                "moreTriggerCharacter": {
                    "description": "More trigger characters.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "DocumentOnTypeFormattingParams": {
            "description": "The parameters of a [DocumentOnTypeFormattingRequest](#DocumentOnTypeFormattingRequest).",
            "properties": {
                "ch": {
                    "description": "The character that has been typed.",
                    "type": "string"
                },
                "options": {
                    "$ref": "#/definitions/FormattingOptions",
                    "description": "The format options."
                },
                "position": {
                    "$ref": "#/definitions/Position",
                    "description": "The position at which this request was send."
                },
                "textDocument": {
                    "$ref": "#/definitions/TextDocumentIdentifier",
                    "description": "The document to format."
                }
            },
            "type": "object"
        },
        "DocumentOnTypeFormattingRegistrationOptions": {
            "description": "Registration options for a [DocumentOnTypeFormattingRequest](#DocumentOnTypeFormattingRequest).",
            "properties": {
                "documentSelector": {
                    "description": "A document selector to identify the scope of the registration. If set to null\nthe document selector provided on the client side will be used.",
                    "items": {
                        "anyOf": [
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "firstTriggerCharacter": {
                    "description": "A character on which formatting should be triggered, like `}`.",
                    "type": "string"
                },
                "moreTriggerCharacter": {
                    "description": "More trigger characters.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "DocumentRangeFormattingClientCapabilities": {
            "description": "Client capabilities of a [DocumentRangeFormattingRequest](#DocumentRangeFormattingRequest).",
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether range formatting supports dynamic registration.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DocumentRangeFormattingOptions": {
            "description": "Provider options for a [DocumentRangeFormattingRequest](#DocumentRangeFormattingRequest).",
            "properties": {
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DocumentRangeFormattingParams": {
            "description": "The parameters of a [DocumentRangeFormattingRequest](#DocumentRangeFormattingRequest).",
            "properties": {
                "options": {
                    "$ref": "#/definitions/FormattingOptions",
                    "description": "The format options"
                },
                "range": {
                    "$ref": "#/definitions/Range",
                    "description": "The range to format"
                },
                "textDocument": {
                    "$ref": "#/definitions/TextDocumentIdentifier",
                    "description": "The document to format."
                },
                "workDoneToken": {
                    "description": "An optional token that a server can use to report work done progress.",
                    "type": [
                        "string",
                        "number"
                    ]
                }
            },
            "type": "object"
        },
        "DocumentRangeFormattingRegistrationOptions": {
            "description": "Registration options for a [DocumentRangeFormattingRequest](#DocumentRangeFormattingRequest).",
            "properties": {
                "documentSelector": {
                    "description": "A document selector to identify the scope of the registration. If set to null\nthe document selector provided on the client side will be used.",
                    "items": {
                        "anyOf": [
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DocumentSelector": {
            "description": "A document selector is the combination of one or many document filters.\nThe DocumentSelector namespace provides helper functions to work with\n[DocumentSelector](#DocumentSelector)s.",
            "items": {
                "anyOf": [
                    {
                        "properties": {
                            "language": {
                                "description": "A language id, like `typescript`.",
                                "type": "string"
                            },
                            "pattern": {
                                "description": "A glob pattern, like `*.{ts,js}`.",
                                "type": "string"
                            },
                            "scheme": {
                                "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    {
                        "properties": {
                            "language": {
                                "description": "A language id, like `typescript`.",
                                "type": "string"
                            },
                            "pattern": {
                                "description": "A glob pattern, like `*.{ts,js}`.",
                                "type": "string"
                            },
                            "scheme": {
                                "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    {
                        "properties": {
                            "language": {
                                "description": "A language id, like `typescript`.",
                                "type": "string"
                            },
                            "pattern": {
                                "description": "A glob pattern, like `*.{ts,js}`.",
                                "type": "string"
                            },
                            "scheme": {
                                "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    {
                        "type": "string"
                    }
                ]
            },
            "type": "array"
        },
        "DocumentSymbolClientCapabilities": {
            "description": "Client Capabilities for a [DocumentSymbolRequest](#DocumentSymbolRequest).",
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether document symbol supports dynamic registration.",
                    "type": "boolean"
                },
                "hierarchicalDocumentSymbolSupport": {
                    "description": "The client support hierarchical document symbols.",
                    "type": "boolean"
                },
                "symbolKind": {
                    "description": "Specific capabilities for the `SymbolKind`.",
                    "properties": {
                        "valueSet": {
                            "description": "The symbol kind values the client supports. When this\nproperty exists the client also guarantees that it will\nhandle values outside its set gracefully and falls back\nto a default value when unknown.\n\nIf this property is not present the client only supports\nthe symbol kinds from `File` to `Array` as defined in\nthe initial version of the protocol.",
                            "items": {
                                "enum": [
                                    1,
                                    10,
                                    11,
                                    12,
                                    13,
                                    14,
                                    15,
                                    16,
                                    17,
                                    18,
                                    19,
                                    2,
                                    20,
                                    21,
                                    22,
                                    23,
                                    24,
                                    25,
                                    26,
                                    3,
                                    4,
                                    5,
                                    6,
                                    7,
                                    8,
                                    9
                                ],
                                "type": "number"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "DocumentSymbolOptions": {
            "description": "Provider options for a [DocumentSymbolRequest](#DocumentSymbolRequest).",
            "properties": {
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DocumentSymbolParams": {
            "description": "Parameters for a [DocumentSymbolRequest](#DocumentSymbolRequest).",
            "properties": {
                "partialResultToken": {
                    "description": "An optional token that a server can use to report partial results (e.g. streaming) to\nthe client.",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "textDocument": {
                    "$ref": "#/definitions/TextDocumentIdentifier",
                    "description": "The text document."
                },
                "workDoneToken": {
                    "description": "An optional token that a server can use to report work done progress.",
                    "type": [
                        "string",
                        "number"
                    ]
                }
            },
            "type": "object"
        },
        "DocumentSymbolRegistrationOptions": {
            "description": "Registration options for a [DocumentSymbolRequest](#DocumentSymbolRequest).",
            "properties": {
                "documentSelector": {
                    "description": "A document selector to identify the scope of the registration. If set to null\nthe document selector provided on the client side will be used.",
                    "items": {
                        "anyOf": [
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ExecuteCommandClientCapabilities": {
            "description": "The client capabilities of a [ExecuteCommandRequest](#ExecuteCommandRequest).",
            "properties": {
                "dynamicRegistration": {
                    "description": "Execute command supports dynamic registration.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ExecuteCommandOptions": {
            "description": "The server capabilities of a [ExecuteCommandRequest](#ExecuteCommandRequest).",
            "properties": {
                "commands": {
                    "description": "The commands to be executed on the server",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ExecuteCommandParams": {
            "description": "The parameters of a [ExecuteCommandRequest](#ExecuteCommandRequest).",
            "properties": {
                "arguments": {
                    "description": "Arguments that the command should be invoked with.",
                    "items": {
                    },
                    "type": "array"
                },
                "command": {
                    "description": "The identifier of the actual command handler.",
                    "type": "string"
                },
                "workDoneToken": {
                    "description": "An optional token that a server can use to report work done progress.",
                    "type": [
                        "string",
                        "number"
                    ]
                }
            },
            "type": "object"
        },
        "ExecuteCommandRegistrationOptions": {
            "description": "Registration options for a [ExecuteCommandRequest](#ExecuteCommandRequest).",
            "properties": {
                "commands": {
                    "description": "The commands to be executed on the server",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "FailureHandlingKind": {
            "enum": [
                "abort",
                "textOnlyTransactional",
                "transactional",
                "undo"
            ],
            "type": "string"
        },
        "FileChangeType": {
            "enum": [
                1,
                2,
                3
            ],
            "type": "number"
        },
        "FileEvent": {
            "description": "An event describing a file change.",
            "properties": {
                "type": {
                    "description": "The change type.",
                    "enum": [
                        1,
                        2,
                        3
                    ],
                    "type": "number"
                },
                "uri": {
                    "description": "The file's uri.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "FileSystemWatcher": {
            "properties": {
                "globPattern": {
                    "description": "The  glob pattern to watch. Glob patterns can have the following syntax:\n- `*` to match one or more characters in a path segment\n- `?` to match on one character in a path segment\n- `**` to match any number of path segments, including none\n- `{}` to group conditions (e.g. `**​/*.{ts,js}` matches all TypeScript and JavaScript files)\n- `[]` to declare a range of characters to match in a path segment (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)\n- `[!...]` to negate a range of characters to match in a path segment (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but not `example.0`)",
                    "type": "string"
                },
                "kind": {
                    "description": "The kind of events of interest. If omitted it defaults\nto WatchKind.Create | WatchKind.Change | WatchKind.Delete\nwhich is 7.",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "FoldingRangeClientCapabilities": {
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether implementation supports dynamic registration for folding range providers. If this is set to `true`\nthe client supports the new `FoldingRangeRegistrationOptions` return value for the corresponding server\ncapability as well.",
                    "type": "boolean"
                },
                "lineFoldingOnly": {
                    "description": "If set, the client signals that it only supports folding complete lines. If set, client will\nignore specified `startCharacter` and `endCharacter` properties in a FoldingRange.",
                    "type": "boolean"
                },
                "rangeLimit": {
                    "description": "The maximum number of folding ranges that the client prefers to receive per document. The value serves as a\nhint, servers are free to follow the limit.",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "FoldingRangeOptions": {
            "properties": {
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "FoldingRangeRegistrationOptions": {
            "properties": {
                "documentSelector": {
                    "description": "A document selector to identify the scope of the registration. If set to null\nthe document selector provided on the client side will be used.",
                    "items": {
                        "anyOf": [
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "id": {
                    "description": "The id used to register the request. The id can be used to deregister\nthe request again. See also Registration#id.",
                    "type": "string"
                },
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "FormattingOptions": {
            "additionalProperties": {
                "type": [
                    "string",
                    "number",
                    "boolean"
                ]
            },
            "description": "Value-object describing what options formatting should use.\nThe FormattingOptions namespace provides helper functions to work with\n[FormattingOptions](#FormattingOptions) literals.",
            "properties": {
                "insertFinalNewline": {
                    "description": "Insert a newline character at the end of the file if one does not exist.",
                    "type": "boolean"
                },
                "insertSpaces": {
                    "description": "Prefer spaces over tabs.",
                    "type": "boolean"
                },
                "tabSize": {
                    "description": "Size of a tab in spaces.",
                    "type": "number"
                },
                "trimFinalNewlines": {
                    "description": "Trim all newlines after the final newline at the end of the file.",
                    "type": "boolean"
                },
                "trimTrailingWhitespace": {
                    "description": "Trim trailing whitespaces on a line.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "HoverClientCapabilities": {
            "properties": {
                "contentFormat": {
                    "description": "Client supports the follow content formats for the content\nproperty. The order describes the preferred format of the client.",
                    "items": {
                        "enum": [
                            "markdown",
                            "plaintext"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "dynamicRegistration": {
                    "description": "Whether hover supports dynamic registration.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "HoverOptions": {
            "description": "Hover options.",
            "properties": {
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "HoverParams": {
            "description": "Parameters for a [HoverRequest](#HoverRequest).",
            "properties": {
                "position": {
                    "$ref": "#/definitions/Position",
                    "description": "The position inside the text document."
                },
                "textDocument": {
                    "$ref": "#/definitions/TextDocumentIdentifier",
                    "description": "The text document."
                },
                "workDoneToken": {
                    "description": "An optional token that a server can use to report work done progress.",
                    "type": [
                        "string",
                        "number"
                    ]
                }
            },
            "type": "object"
        },
        "HoverRegistrationOptions": {
            "description": "Registration options for a [HoverRequest](#HoverRequest).",
            "properties": {
                "documentSelector": {
                    "description": "A document selector to identify the scope of the registration. If set to null\nthe document selector provided on the client side will be used.",
                    "items": {
                        "anyOf": [
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ImplementationClientCapabilities": {
            "description": "Since 3.6.0",
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether implementation supports dynamic registration. If this is set to `true`\nthe client supports the new `ImplementationRegistrationOptions` return value\nfor the corresponding server capability as well.",
                    "type": "boolean"
                },
                "linkSupport": {
                    "description": "The client supports additional metadata in the form of definition links.\n\nSince 3.14.0",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ImplementationOptions": {
            "properties": {
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ImplementationRegistrationOptions": {
            "properties": {
                "documentSelector": {
                    "description": "A document selector to identify the scope of the registration. If set to null\nthe document selector provided on the client side will be used.",
                    "items": {
                        "anyOf": [
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "id": {
                    "description": "The id used to register the request. The id can be used to deregister\nthe request again. See also Registration#id.",
                    "type": "string"
                },
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "InitializeError": {
            "description": "Known error codes for an `InitializeError`;\nThe data type of the ResponseError if the\ninitialize request fails.",
            "properties": {
                "retry": {
                    "description": "Indicates whether the client execute the following retry logic:\n(1) show the message provided by the ResponseError to the user\n(2) user selects retry or cancel\n(3) if user selected retry the initialize method is sent again.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "InitializeParams": {
            "allOf": [
                {
                    "$ref": "#/definitions/_InitializeParams"
                },
                {
                    "$ref": "#/definitions/WorkspaceFoldersInitializeParams"
                }
            ]
        },
        "InitializeResult": {
            "additionalProperties": {
            },
            "description": "The result returned from an initialize request.",
            "properties": {
                "capabilities": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/_ServerCapabilities<T>_1"
                        },
                        {
                            "$ref": "#/definitions/WorkspaceFoldersServerCapabilities"
                        }
                    ],
                    "description": "The capabilities the language server provides."
                },
                "serverInfo": {
                    "description": "Information about the server.",
                    "properties": {
                        "name": {
                            "description": "The name of the server as defined by the server.",
                            "type": "string"
                        },
                        "version": {
                            "description": "The servers's version as defined by the server.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "InitializedParams": {
            "type": "object"
        },
        "Location": {
            "description": "Represents a location inside a resource, such as a line\ninside a text file.\nThe Location namespace provides helper functions to work with\n[Location](#Location) literals.",
            "properties": {
                "range": {
                    "$ref": "#/definitions/Range"
                },
                "uri": {
                    "description": "A tagging type for string properties that are actually URIs.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "LogMessageParams": {
            "description": "The log message parameters.",
            "properties": {
                "message": {
                    "description": "The actual message",
                    "type": "string"
                },
                "type": {
                    "description": "The message type. See {@link MessageType}",
                    "enum": [
                        1,
                        2,
                        3,
                        4
                    ],
                    "type": "number"
                }
            },
            "type": "object"
        },
        "MarkupContent": {
            "description": "A `MarkupContent` literal represents a string value which content is interpreted base on its\nkind flag. Currently the protocol supports `plaintext` and `markdown` as markup kinds.\n\nIf the kind is `markdown` then the value can contain fenced code blocks like in GitHub issues.\nSee https://help.github.com/articles/creating-and-highlighting-code-blocks/#syntax-highlighting\n\nHere is an example how such a string can be constructed using JavaScript / TypeScript:\n```ts\nlet markdown: MarkdownContent = {\n  kind: MarkupKind.Markdown,\nvalue: [\n\t\t'# Header',\n\t\t'Some text',\n\t\t'```typescript',\n\t\t'someCode();',\n\t\t'```'\n].join('\\n')\n};\n```\n\n*Please Note* that clients might sanitize the return markdown. A client could decide to\nremove HTML from the markdown to avoid script execution.",
            "properties": {
                "kind": {
                    "$ref": "#/definitions/MarkupKind",
                    "description": "The type of the Markup"
                },
                "value": {
                    "description": "The content itself",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MarkupKind": {
            "description": "Describes the content type that a client supports in various\nresult literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n\nPlease note that `MarkupKinds` must not start with a `$`. This kinds\nare reserved for internal usage.",
            "enum": [
                "markdown",
                "plaintext"
            ],
            "type": "string"
        },
        "MessageActionItem": {
            "properties": {
                "title": {
                    "description": "A short title like 'Retry', 'Open Log' etc.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MessageType": {
            "enum": [
                1,
                2,
                3,
                4
            ],
            "type": "number"
        },
        "ParameterInformation": {
            "description": "Represents a parameter of a callable-signature. A parameter can\nhave a label and a doc-comment.\nThe ParameterInformation namespace provides helper functions to work with\n[ParameterInformation](#ParameterInformation) literals.",
            "properties": {
                "documentation": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/MarkupContent"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "The human-readable doc-comment of this signature. Will be shown\nin the UI but can be omitted."
                },
                "label": {
                    "anyOf": [
                        {
                            "additionalItems": {
                                "anyOf": [
                                    {
                                        "type": "number"
                                    },
                                    {
                                        "type": "number"
                                    }
                                ]
                            },
                            "items": [
                                {
                                    "type": "number"
                                },
                                {
                                    "type": "number"
                                }
                            ],
                            "minItems": 2,
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "The label of this parameter information.\n\nEither a string or an inclusive start and exclusive end offsets within its containing\nsignature label. (see SignatureInformation.label). The offsets are based on a UTF-16\nstring representation as `Position` and `Range` does.\n\n*Note*: a label of type string should be a substring of its containing signature label.\nIts intended use case is to highlight the parameter label part in the `SignatureInformation.label`."
                }
            },
            "type": "object"
        },
        "PartialResultParams": {
            "properties": {
                "partialResultToken": {
                    "description": "An optional token that a server can use to report partial results (e.g. streaming) to\nthe client.",
                    "type": [
                        "string",
                        "number"
                    ]
                }
            },
            "type": "object"
        },
        "Position": {
            "description": "Position in a text document expressed as zero-based line and character offset.\nThe offsets are based on a UTF-16 string representation. So a string of the form\n`a𐐀b` the character offset of the character `a` is 0, the character offset of `𐐀`\nis 1 and the character offset of b is 3 since `𐐀` is represented using two code\nunits in UTF-16.\n\nPositions are line end character agnostic. So you can not specify a position that\ndenotes `\\r|\\n` or `\\n|` where `|` represents the character offset.\nThe Position namespace provides helper functions to work with\n[Position](#Position) literals.",
            "properties": {
                "character": {
                    "description": "Character offset on a line in a document (zero-based). Assuming that the line is\nrepresented as a string, the `character` value represents the gap between the\n`character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the\nline length.\nIf a line number is negative, it defaults to 0.",
                    "type": "number"
                },
                "line": {
                    "description": "Line position in a document (zero-based).\nIf a line number is greater than the number of lines in a document, it defaults back to the number of lines in the document.\nIf a line number is negative, it defaults to 0.",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "PrepareRenameParams": {
            "properties": {
                "position": {
                    "$ref": "#/definitions/Position",
                    "description": "The position inside the text document."
                },
                "textDocument": {
                    "$ref": "#/definitions/TextDocumentIdentifier",
                    "description": "The text document."
                },
                "workDoneToken": {
                    "description": "An optional token that a server can use to report work done progress.",
                    "type": [
                        "string",
                        "number"
                    ]
                }
            },
            "type": "object"
        },
        "PublishDiagnosticsClientCapabilities": {
            "description": "The publish diagnostic client capabilities.",
            "properties": {
                "relatedInformation": {
                    "description": "Whether the clients accepts diagnostics with related information.",
                    "type": "boolean"
                },
                "tagSupport": {
                    "description": "Client supports the tag property to provide meta data about a diagnostic.\nClients supporting tags have to handle unknown tags gracefully.",
                    "properties": {
                        "valueSet": {
                            "description": "The tags supported by the client.",
                            "items": {
                                "enum": [
                                    1,
                                    2
                                ],
                                "type": "number"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                "versionSupport": {
                    "description": "Whether the client interprets the version property of the\n`textDocument/publishDiagnostics` notification`s parameter.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "PublishDiagnosticsParams": {
            "description": "The publish diagnostic notification's parameters.",
            "properties": {
                "diagnostics": {
                    "description": "An array of diagnostic information items.",
                    "items": {
                        "$ref": "#/definitions/Diagnostic"
                    },
                    "type": "array"
                },
                "uri": {
                    "description": "The URI for which diagnostic information is reported.",
                    "type": "string"
                },
                "version": {
                    "description": "Optional the version number of the document the diagnostics are published for.",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "Range": {
            "description": "A range in a text document expressed as (zero-based) start and end positions.\n\nIf you want to specify a range that contains a line including the line ending\ncharacter(s) then use an end position denoting the start of the next line.\nFor example:\n```ts\n{\n     start: { line: 5, character: 23 }\n     end : { line 6, character : 0 }\n}\n```\nThe Range namespace provides helper functions to work with\n[Range](#Range) literals.",
            "properties": {
                "end": {
                    "$ref": "#/definitions/Position",
                    "description": "The range's end position."
                },
                "start": {
                    "$ref": "#/definitions/Position",
                    "description": "The range's start position"
                }
            },
            "type": "object"
        },
        "ReferenceClientCapabilities": {
            "description": "Client Capabilities for a [ReferencesRequest](#ReferencesRequest).",
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether references supports dynamic registration.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ReferenceContext": {
            "description": "Value-object that contains additional information when\nrequesting references.",
            "properties": {
                "includeDeclaration": {
                    "description": "Include the declaration of the current symbol.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ReferenceOptions": {
            "description": "Reference options.",
            "properties": {
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ReferenceParams": {
            "description": "Parameters for a [ReferencesRequest](#ReferencesRequest).",
            "properties": {
                "context": {
                    "$ref": "#/definitions/ReferenceContext"
                },
                "partialResultToken": {
                    "description": "An optional token that a server can use to report partial results (e.g. streaming) to\nthe client.",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "position": {
                    "$ref": "#/definitions/Position",
                    "description": "The position inside the text document."
                },
                "textDocument": {
                    "$ref": "#/definitions/TextDocumentIdentifier",
                    "description": "The text document."
                },
                "workDoneToken": {
                    "description": "An optional token that a server can use to report work done progress.",
                    "type": [
                        "string",
                        "number"
                    ]
                }
            },
            "type": "object"
        },
        "ReferenceRegistrationOptions": {
            "description": "Registration options for a [ReferencesRequest](#ReferencesRequest).",
            "properties": {
                "documentSelector": {
                    "description": "A document selector to identify the scope of the registration. If set to null\nthe document selector provided on the client side will be used.",
                    "items": {
                        "anyOf": [
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "Registration": {
            "description": "General parameters to to register for an notification or to register a provider.",
            "properties": {
                "id": {
                    "description": "The id used to register the request. The id can be used to deregister\nthe request again.",
                    "type": "string"
                },
                "method": {
                    "description": "The method to register for.",
                    "type": "string"
                },
                "registerOptions": {
                    "description": "Options necessary for the registration."
                }
            },
            "type": "object"
        },
        "RegistrationParams": {
            "properties": {
                "registrations": {
                    "items": {
                        "$ref": "#/definitions/Registration"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "RenameClientCapabilities": {
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether rename supports dynamic registration.",
                    "type": "boolean"
                },
                "prepareSupport": {
                    "description": "Client supports testing for validity of rename operations\nbefore execution.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "RenameFile": {
            "description": "Rename file operation",
            "properties": {
                "kind": {
                    "description": "A rename",
                    "enum": [
                        "rename"
                    ],
                    "type": "string"
                },
                "newUri": {
                    "description": "The new location.",
                    "type": "string"
                },
                "oldUri": {
                    "description": "The old (existing) location.",
                    "type": "string"
                },
                "options": {
                    "$ref": "#/definitions/RenameFileOptions",
                    "description": "Rename options."
                }
            },
            "type": "object"
        },
        "RenameFileOptions": {
            "description": "Rename file options",
            "properties": {
                "ignoreIfExists": {
                    "description": "Ignores if target exists.",
                    "type": "boolean"
                },
                "overwrite": {
                    "description": "Overwrite target if existing. Overwrite wins over `ignoreIfExists`",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "RenameOptions": {
            "description": "Provider options for a [RenameRequest](#RenameRequest).",
            "properties": {
                "prepareProvider": {
                    "description": "Renames should be checked and tested before being executed.",
                    "type": "boolean"
                },
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "RenameParams": {
            "description": "The parameters of a [RenameRequest](#RenameRequest).",
            "properties": {
                "newName": {
                    "description": "The new name of the symbol. If the given name is not valid the\nrequest must return a [ResponseError](#ResponseError) with an\nappropriate message set.",
                    "type": "string"
                },
                "position": {
                    "$ref": "#/definitions/Position",
                    "description": "The position at which this request was sent."
                },
                "textDocument": {
                    "$ref": "#/definitions/TextDocumentIdentifier",
                    "description": "The document to rename."
                },
                "workDoneToken": {
                    "description": "An optional token that a server can use to report work done progress.",
                    "type": [
                        "string",
                        "number"
                    ]
                }
            },
            "type": "object"
        },
        "RenameRegistrationOptions": {
            "description": "Registration options for a [RenameRequest](#RenameRequest).",
            "properties": {
                "documentSelector": {
                    "description": "A document selector to identify the scope of the registration. If set to null\nthe document selector provided on the client side will be used.",
                    "items": {
                        "anyOf": [
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "prepareProvider": {
                    "description": "Renames should be checked and tested before being executed.",
                    "type": "boolean"
                },
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ResourceOperationKind": {
            "enum": [
                "create",
                "delete",
                "rename"
            ],
            "type": "string"
        },
        "SaveOptions": {
            "description": "Save options.",
            "properties": {
                "includeText": {
                    "description": "The client is supposed to include the content on save.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "SelectionRangeClientCapabilities": {
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether implementation supports dynamic registration for selection range providers. If this is set to `true`\nthe client supports the new `SelectionRangeRegistrationOptions` return value for the corresponding server\ncapability as well.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "SelectionRangeOptions": {
            "properties": {
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "SelectionRangeRegistrationOptions": {
            "properties": {
                "documentSelector": {
                    "description": "A document selector to identify the scope of the registration. If set to null\nthe document selector provided on the client side will be used.",
                    "items": {
                        "anyOf": [
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "id": {
                    "description": "The id used to register the request. The id can be used to deregister\nthe request again. See also Registration#id.",
                    "type": "string"
                },
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ServerCapabilities": {
            "allOf": [
                {
                    "$ref": "#/definitions/_ServerCapabilities<T>"
                },
                {
                    "$ref": "#/definitions/WorkspaceFoldersServerCapabilities"
                }
            ]
        },
        "ShowMessageParams": {
            "description": "The parameters of a notification message.",
            "properties": {
                "message": {
                    "description": "The actual message",
                    "type": "string"
                },
                "type": {
                    "description": "The message type. See {@link MessageType}",
                    "enum": [
                        1,
                        2,
                        3,
                        4
                    ],
                    "type": "number"
                }
            },
            "type": "object"
        },
        "ShowMessageRequestParams": {
            "properties": {
                "actions": {
                    "description": "The message action items to present.",
                    "items": {
                        "$ref": "#/definitions/MessageActionItem"
                    },
                    "type": "array"
                },
                "message": {
                    "description": "The actual message",
                    "type": "string"
                },
                "type": {
                    "description": "The message type. See {@link MessageType}",
                    "enum": [
                        1,
                        2,
                        3,
                        4
                    ],
                    "type": "number"
                }
            },
            "type": "object"
        },
        "SignatureHelp": {
            "description": "Signature help represents the signature of something\ncallable. There can be multiple signature but only one\nactive and only one active parameter.",
            "properties": {
                "activeParameter": {
                    "description": "The active parameter of the active signature. Set to `null`\nif the active signature has no parameters.",
                    "type": "number"
                },
                "activeSignature": {
                    "description": "The active signature. Set to `null` if no\nsignatures exist.",
                    "type": "number"
                },
                "signatures": {
                    "description": "One or more signatures.",
                    "items": {
                        "$ref": "#/definitions/SignatureInformation"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "SignatureHelpClientCapabilities": {
            "description": "Client Capabilities for a [SignatureHelpRequest](#SignatureHelpRequest).",
            "properties": {
                "contextSupport": {
                    "description": "The client supports to send additional context information for a\n`textDocument/signatureHelp` request. A client that opts into\ncontextSupport will also support the `retriggerCharacters` on\n`SignatureHelpOptions`.",
                    "type": "boolean"
                },
                "dynamicRegistration": {
                    "description": "Whether signature help supports dynamic registration.",
                    "type": "boolean"
                },
                "signatureInformation": {
                    "description": "The client supports the following `SignatureInformation`\nspecific properties.",
                    "properties": {
                        "documentationFormat": {
                            "description": "Client supports the follow content formats for the documentation\nproperty. The order describes the preferred format of the client.",
                            "items": {
                                "enum": [
                                    "markdown",
                                    "plaintext"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "parameterInformation": {
                            "description": "Client capabilities specific to parameter information.",
                            "properties": {
                                "labelOffsetSupport": {
                                    "description": "The client supports processing label offsets instead of a\nsimple label string.",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "SignatureHelpContext": {
            "description": "Additional information about the context in which a signature help request was triggered.",
            "properties": {
                "activeSignatureHelp": {
                    "$ref": "#/definitions/SignatureHelp",
                    "description": "The currently active `SignatureHelp`.\n\nThe `activeSignatureHelp` has its `SignatureHelp.activeSignature` field updated based on\nthe user navigating through available signatures."
                },
                "isRetrigger": {
                    "description": "`true` if signature help was already showing when it was triggered.\n\nRetriggers occur when the signature help is already active and can be caused by actions such as\ntyping a trigger character, a cursor move, or document content changes.",
                    "type": "boolean"
                },
                "triggerCharacter": {
                    "description": "Character that caused signature help to be triggered.\n\nThis is undefined when `triggerKind !== SignatureHelpTriggerKind.TriggerCharacter`",
                    "type": "string"
                },
                "triggerKind": {
                    "description": "Action that caused signature help to be triggered.",
                    "enum": [
                        1,
                        2,
                        3
                    ],
                    "type": "number"
                }
            },
            "type": "object"
        },
        "SignatureHelpOptions": {
            "description": "Server Capabilities for a [SignatureHelpRequest](#SignatureHelpRequest).",
            "properties": {
                "retriggerCharacters": {
                    "description": "List of characters that re-trigger signature help.\n\nThese trigger characters are only active when signature help is already showing. All trigger characters\nare also counted as re-trigger characters.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "triggerCharacters": {
                    "description": "List of characters that trigger signature help.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "SignatureHelpParams": {
            "description": "Parameters for a [SignatureHelpRequest](#SignatureHelpRequest).",
            "properties": {
                "context": {
                    "$ref": "#/definitions/SignatureHelpContext",
                    "description": "The signature help context. This is only available if the client specifies\nto send this using the client capability `textDocument.signatureHelp.contextSupport === true`"
                },
                "position": {
                    "$ref": "#/definitions/Position",
                    "description": "The position inside the text document."
                },
                "textDocument": {
                    "$ref": "#/definitions/TextDocumentIdentifier",
                    "description": "The text document."
                },
                "workDoneToken": {
                    "description": "An optional token that a server can use to report work done progress.",
                    "type": [
                        "string",
                        "number"
                    ]
                }
            },
            "type": "object"
        },
        "SignatureHelpRegistrationOptions": {
            "description": "Registration options for a [SignatureHelpRequest](#SignatureHelpRequest).",
            "properties": {
                "documentSelector": {
                    "description": "A document selector to identify the scope of the registration. If set to null\nthe document selector provided on the client side will be used.",
                    "items": {
                        "anyOf": [
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "retriggerCharacters": {
                    "description": "List of characters that re-trigger signature help.\n\nThese trigger characters are only active when signature help is already showing. All trigger characters\nare also counted as re-trigger characters.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "triggerCharacters": {
                    "description": "List of characters that trigger signature help.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "SignatureHelpTriggerKind": {
            "enum": [
                1,
                2,
                3
            ],
            "type": "number"
        },
        "SignatureInformation": {
            "description": "Represents the signature of something callable. A signature\ncan have a label, like a function-name, a doc-comment, and\na set of parameters.\nThe SignatureInformation namespace provides helper functions to work with\n[SignatureInformation](#SignatureInformation) literals.",
            "properties": {
                "documentation": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/MarkupContent"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "The human-readable doc-comment of this signature. Will be shown\nin the UI but can be omitted."
                },
                "label": {
                    "description": "The label of this signature. Will be shown in\nthe UI.",
                    "type": "string"
                },
                "parameters": {
                    "description": "The parameters of this signature.",
                    "items": {
                        "$ref": "#/definitions/ParameterInformation"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "StaticRegistrationOptions": {
            "description": "Static registration options to be returned in the initialize\nrequest.\nThe StaticRegistrationOptions namespace provides helper functions to work with\n[StaticRegistrationOptions](#StaticRegistrationOptions) literals.",
            "properties": {
                "id": {
                    "description": "The id used to register the request. The id can be used to deregister\nthe request again. See also Registration#id.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "T": {
            "type": "object"
        },
        "T_1": {
            "type": "object"
        },
        "T_2": {
            "type": "object"
        },
        "TextDocumentChangeRegistrationOptions": {
            "description": "Describe options to be used when registered for text document change events.",
            "properties": {
                "documentSelector": {
                    "description": "A document selector to identify the scope of the registration. If set to null\nthe document selector provided on the client side will be used.",
                    "items": {
                        "anyOf": [
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "syncKind": {
                    "description": "How documents are synced to the server.",
                    "enum": [
                        0,
                        1,
                        2
                    ],
                    "type": "number"
                }
            },
            "type": "object"
        },
        "TextDocumentClientCapabilities": {
            "description": "Text document specific client capabilities.",
            "properties": {
                "codeAction": {
                    "$ref": "#/definitions/CodeActionClientCapabilities",
                    "description": "Capabilities specific to the `textDocument/codeAction`"
                },
                "codeLens": {
                    "$ref": "#/definitions/CodeLensClientCapabilities",
                    "description": "Capabilities specific to the `textDocument/codeLens`"
                },
                "colorProvider": {
                    "$ref": "#/definitions/DocumentColorClientCapabilities",
                    "description": "Capabilities specific to the `textDocument/documentColor`"
                },
                "completion": {
                    "$ref": "#/definitions/CompletionClientCapabilities",
                    "description": "Capabilities specific to the `textDocument/completion`"
                },
                "declaration": {
                    "$ref": "#/definitions/DeclarationClientCapabilities",
                    "description": "Capabilities specific to the `textDocument/declaration`"
                },
                "definition": {
                    "$ref": "#/definitions/DefinitionClientCapabilities",
                    "description": "Capabilities specific to the `textDocument/definition`"
                },
                "documentHighlight": {
                    "$ref": "#/definitions/DocumentHighlightClientCapabilities",
                    "description": "Capabilities specific to the `textDocument/documentHighlight`"
                },
                "documentLink": {
                    "$ref": "#/definitions/DocumentLinkClientCapabilities",
                    "description": "Capabilities specific to the `textDocument/documentLink`"
                },
                "documentSymbol": {
                    "$ref": "#/definitions/DocumentSymbolClientCapabilities",
                    "description": "Capabilities specific to the `textDocument/documentSymbol`"
                },
                "foldingRange": {
                    "$ref": "#/definitions/FoldingRangeClientCapabilities",
                    "description": "Capabilities specific to `textDocument/foldingRange` requests."
                },
                "formatting": {
                    "$ref": "#/definitions/DocumentFormattingClientCapabilities",
                    "description": "Capabilities specific to the `textDocument/formatting`"
                },
                "hover": {
                    "$ref": "#/definitions/HoverClientCapabilities",
                    "description": "Capabilities specific to the `textDocument/hover`"
                },
                "implementation": {
                    "$ref": "#/definitions/ImplementationClientCapabilities",
                    "description": "Capabilities specific to the `textDocument/implementation`"
                },
                "onTypeFormatting": {
                    "$ref": "#/definitions/DocumentOnTypeFormattingClientCapabilities",
                    "description": "Capabilities specific to the `textDocument/onTypeFormatting`"
                },
                "publishDiagnostics": {
                    "$ref": "#/definitions/PublishDiagnosticsClientCapabilities",
                    "description": "Capabilities specific to `textDocument/publishDiagnostics`."
                },
                "rangeFormatting": {
                    "$ref": "#/definitions/DocumentRangeFormattingClientCapabilities",
                    "description": "Capabilities specific to the `textDocument/rangeFormatting`"
                },
                "references": {
                    "$ref": "#/definitions/ReferenceClientCapabilities",
                    "description": "Capabilities specific to the `textDocument/references`"
                },
                "rename": {
                    "$ref": "#/definitions/RenameClientCapabilities",
                    "description": "Capabilities specific to the `textDocument/rename`"
                },
                "selectionRange": {
                    "$ref": "#/definitions/SelectionRangeClientCapabilities",
                    "description": "Capabilities specific to `textDocument/selectionRange` requests"
                },
                "signatureHelp": {
                    "$ref": "#/definitions/SignatureHelpClientCapabilities",
                    "description": "Capabilities specific to the `textDocument/signatureHelp`"
                },
                "synchronization": {
                    "$ref": "#/definitions/TextDocumentSyncClientCapabilities",
                    "description": "Defines which synchronization capabilities the client supports."
                },
                "typeDefinition": {
                    "$ref": "#/definitions/TypeDefinitionClientCapabilities",
                    "description": "Capabilities specific to the `textDocument/typeDefinition`"
                }
            },
            "type": "object"
        },
        "TextDocumentContentChangeEvent": {
            "anyOf": [
                {
                    "properties": {
                        "range": {
                            "$ref": "#/definitions/Range",
                            "description": "The range of the document that changed."
                        },
                        "rangeLength": {
                            "description": "The optional length of the range that got replaced.",
                            "type": "number"
                        },
                        "text": {
                            "description": "The new text for the provided range.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                {
                    "properties": {
                        "text": {
                            "description": "The new text of the whole document.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "TextDocumentEdit": {
            "description": "Describes textual changes on a text document. A TextDocumentEdit describes all changes\non a document version Si and after they are applied move the document to version Si+1.\nSo the creator of a TextDocumentEdit doesn't need to sort the array of edits or do any\nkind of ordering. However the edits must be non overlapping.\nThe TextDocumentEdit namespace provides helper function to create\nan edit that manipulates a text document.",
            "properties": {
                "edits": {
                    "description": "The edits to be applied.",
                    "items": {
                        "$ref": "#/definitions/TextEdit"
                    },
                    "type": "array"
                },
                "textDocument": {
                    "$ref": "#/definitions/VersionedTextDocumentIdentifier",
                    "description": "The text document to change."
                }
            },
            "type": "object"
        },
        "TextDocumentIdentifier": {
            "description": "A literal to identify a text document in the client.\nThe TextDocumentIdentifier namespace provides helper functions to work with\n[TextDocumentIdentifier](#TextDocumentIdentifier) literals.",
            "properties": {
                "uri": {
                    "description": "The text document's uri.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TextDocumentItem": {
            "description": "An item to transfer a text document from the client to the\nserver.\nThe TextDocumentItem namespace provides helper functions to work with\n[TextDocumentItem](#TextDocumentItem) literals.",
            "properties": {
                "languageId": {
                    "description": "The text document's language identifier",
                    "type": "string"
                },
                "text": {
                    "description": "The content of the opened text document.",
                    "type": "string"
                },
                "uri": {
                    "description": "The text document's uri.",
                    "type": "string"
                },
                "version": {
                    "description": "The version number of this document (it will increase after each\nchange, including undo/redo).",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "TextDocumentPositionParams": {
            "description": "A parameter literal used in requests to pass a text document and a position inside that\ndocument.",
            "properties": {
                "position": {
                    "$ref": "#/definitions/Position",
                    "description": "The position inside the text document."
                },
                "textDocument": {
                    "$ref": "#/definitions/TextDocumentIdentifier",
                    "description": "The text document."
                }
            },
            "type": "object"
        },
        "TextDocumentRegistrationOptions": {
            "description": "General text document registration options.\nThe TextDocumentRegistrationOptions namespace provides helper functions to work with\n[TextDocumentRegistrationOptions](#TextDocumentRegistrationOptions) literals.",
            "properties": {
                "documentSelector": {
                    "description": "A document selector to identify the scope of the registration. If set to null\nthe document selector provided on the client side will be used.",
                    "items": {
                        "anyOf": [
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "TextDocumentSaveReason": {
            "enum": [
                1,
                2,
                3
            ],
            "type": "number"
        },
        "TextDocumentSaveRegistrationOptions": {
            "description": "Save registration options.",
            "properties": {
                "documentSelector": {
                    "description": "A document selector to identify the scope of the registration. If set to null\nthe document selector provided on the client side will be used.",
                    "items": {
                        "anyOf": [
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "includeText": {
                    "description": "The client is supposed to include the content on save.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "TextDocumentSyncClientCapabilities": {
            "properties": {
                "didSave": {
                    "description": "The client supports did save notifications.",
                    "type": "boolean"
                },
                "dynamicRegistration": {
                    "description": "Whether text document synchronization supports dynamic registration.",
                    "type": "boolean"
                },
                "willSave": {
                    "description": "The client supports sending will save notifications.",
                    "type": "boolean"
                },
                "willSaveWaitUntil": {
                    "description": "The client supports sending a will save request and\nwaits for a response providing text edits which will\nbe applied to the document before it is saved.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "TextDocumentSyncKind": {
            "enum": [
                0,
                1,
                2
            ],
            "type": "number"
        },
        "TextDocumentSyncOptions": {
            "properties": {
                "change": {
                    "description": "Change notifications are sent to the server. See TextDocumentSyncKind.None, TextDocumentSyncKind.Full\nand TextDocumentSyncKind.Incremental. If omitted it defaults to TextDocumentSyncKind.None.",
                    "enum": [
                        0,
                        1,
                        2
                    ],
                    "type": "number"
                },
                "openClose": {
                    "description": "Open and close notifications are sent to the server. If omitted open close notification should not\nbe sent.",
                    "type": "boolean"
                },
                "save": {
                    "$ref": "#/definitions/SaveOptions",
                    "description": "If present save notifications are sent to the server. If omitted the notification should not be\nsent."
                },
                "willSave": {
                    "description": "If present will save notifications are sent to the server. If omitted the notification should not be\nsent.",
                    "type": "boolean"
                },
                "willSaveWaitUntil": {
                    "description": "If present will save wait until requests are sent to the server. If omitted the request should not be\nsent.",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "TextEdit": {
            "description": "A text edit applicable to a text document.\nThe TextEdit namespace provides helper function to create replace,\ninsert and delete edits more easily.",
            "properties": {
                "newText": {
                    "description": "The string to be inserted. For delete operations use an\nempty string.",
                    "type": "string"
                },
                "range": {
                    "$ref": "#/definitions/Range",
                    "description": "The range of the text document to be manipulated. To insert\ntext into a document create a range where start === end."
                }
            },
            "type": "object"
        },
        "TypeDefinitionClientCapabilities": {
            "description": "Since 3.6.0",
            "properties": {
                "dynamicRegistration": {
                    "description": "Whether implementation supports dynamic registration. If this is set to `true`\nthe client supports the new `TypeDefinitionRegistrationOptions` return value\nfor the corresponding server capability as well.",
                    "type": "boolean"
                },
                "linkSupport": {
                    "description": "The client supports additional metadata in the form of definition links.\n\nSince 3.14.0",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "TypeDefinitionOptions": {
            "properties": {
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "TypeDefinitionRegistrationOptions": {
            "properties": {
                "documentSelector": {
                    "description": "A document selector to identify the scope of the registration. If set to null\nthe document selector provided on the client side will be used.",
                    "items": {
                        "anyOf": [
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "properties": {
                                    "language": {
                                        "description": "A language id, like `typescript`.",
                                        "type": "string"
                                    },
                                    "pattern": {
                                        "description": "A glob pattern, like `*.{ts,js}`.",
                                        "type": "string"
                                    },
                                    "scheme": {
                                        "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                },
                "id": {
                    "description": "The id used to register the request. The id can be used to deregister\nthe request again. See also Registration#id.",
                    "type": "string"
                },
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "Unregistration": {
            "description": "General parameters to unregister a request or notification.",
            "properties": {
                "id": {
                    "description": "The id used to unregister the request or notification. Usually an id\nprovided during the register request.",
                    "type": "string"
                },
                "method": {
                    "description": "The method to unregister for.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UnregistrationParams": {
            "properties": {
                "unregisterations": {
                    "items": {
                        "$ref": "#/definitions/Unregistration"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "VersionedTextDocumentIdentifier": {
            "description": "An identifier to denote a specific version of a text document.\nThe VersionedTextDocumentIdentifier namespace provides helper functions to work with\n[VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) literals.",
            "properties": {
                "uri": {
                    "description": "The text document's uri.",
                    "type": "string"
                },
                "version": {
                    "description": "The version number of this document. If a versioned text document identifier\nis sent from the server to the client and the file is not open in the editor\n(the server has not received an open notification before) the server can send\n`null` to indicate that the version is unknown and the content on disk is the\ntruth (as speced with document content ownership).",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "WillSaveTextDocumentParams": {
            "description": "The parameters send in a will save text document notification.",
            "properties": {
                "reason": {
                    "description": "The 'TextDocumentSaveReason'.",
                    "enum": [
                        1,
                        2,
                        3
                    ],
                    "type": "number"
                },
                "textDocument": {
                    "$ref": "#/definitions/TextDocumentIdentifier",
                    "description": "The document that will be saved."
                }
            },
            "type": "object"
        },
        "WorkDoneProgressClientCapabilities": {
            "properties": {
                "window": {
                    "description": "Window specific client capabilities.",
                    "properties": {
                        "workDoneProgress": {
                            "description": "Whether client supports handling progress notifications. If set servers are allowed to\nreport in `workDoneProgress` property in the request specific server capabilities.\n\nSince 3.15.0",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "WorkDoneProgressOptions": {
            "description": "The WorkDoneProgressOptions namespace provides helper functions to work with\n[WorkDoneProgressOptions](#WorkDoneProgressOptions) literals.",
            "properties": {
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "WorkDoneProgressParams": {
            "properties": {
                "workDoneToken": {
                    "description": "An optional token that a server can use to report work done progress.",
                    "type": [
                        "string",
                        "number"
                    ]
                }
            },
            "type": "object"
        },
        "WorkspaceClientCapabilities": {
            "description": "Workspace specific client capabilities.",
            "properties": {
                "applyEdit": {
                    "description": "The client supports applying batch edits\nto the workspace by supporting the request\n'workspace/applyEdit'",
                    "type": "boolean"
                },
                "didChangeConfiguration": {
                    "$ref": "#/definitions/DidChangeConfigurationClientCapabilities",
                    "description": "Capabilities specific to the `workspace/didChangeConfiguration` notification."
                },
                "didChangeWatchedFiles": {
                    "$ref": "#/definitions/DidChangeWatchedFilesClientCapabilities",
                    "description": "Capabilities specific to the `workspace/didChangeWatchedFiles` notification."
                },
                "executeCommand": {
                    "$ref": "#/definitions/ExecuteCommandClientCapabilities",
                    "description": "Capabilities specific to the `workspace/executeCommand` request."
                },
                "symbol": {
                    "$ref": "#/definitions/WorkspaceSymbolClientCapabilities",
                    "description": "Capabilities specific to the `workspace/symbol` request."
                },
                "workspaceEdit": {
                    "$ref": "#/definitions/WorkspaceEditClientCapabilities",
                    "description": "Capabilities specific to `WorkspaceEdit`s"
                }
            },
            "type": "object"
        },
        "WorkspaceEdit": {
            "description": "A workspace edit represents changes to many resources managed in the workspace. The edit\nshould either provide `changes` or `documentChanges`. If documentChanges are present\nthey are preferred over `changes` if the client can handle versioned document edits.",
            "properties": {
                "changes": {
                    "additionalProperties": {
                        "items": {
                            "$ref": "#/definitions/TextEdit"
                        },
                        "type": "array"
                    },
                    "description": "Holds changes to existing resources.",
                    "type": "object"
                },
                "documentChanges": {
                    "description": "Depending on the client capability `workspace.workspaceEdit.resourceOperations` document changes\nare either an array of `TextDocumentEdit`s to express changes to n different text documents\nwhere each text document edit addresses a specific version of a text document. Or it can contain\nabove `TextDocumentEdit`s mixed with create, rename and delete file / folder operations.\n\nWhether a client supports versioned document edits is expressed via\n`workspace.workspaceEdit.documentChanges` client capability.\n\nIf a client neither supports `documentChanges` nor `workspace.workspaceEdit.resourceOperations` then\nonly plain `TextEdit`s using the `changes` property are supported.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/TextDocumentEdit"
                            },
                            {
                                "$ref": "#/definitions/CreateFile"
                            },
                            {
                                "$ref": "#/definitions/RenameFile"
                            },
                            {
                                "$ref": "#/definitions/DeleteFile"
                            }
                        ]
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "WorkspaceEditClientCapabilities": {
            "properties": {
                "documentChanges": {
                    "description": "The client supports versioned document changes in `WorkspaceEdit`s",
                    "type": "boolean"
                },
                "failureHandling": {
                    "$ref": "#/definitions/FailureHandlingKind",
                    "description": "The failure handling strategy of a client if applying the workspace edit\nfails."
                },
                "resourceOperations": {
                    "description": "The resource operations the client supports. Clients should at least\nsupport 'create', 'rename' and 'delete' files and folders.",
                    "items": {
                        "enum": [
                            "create",
                            "delete",
                            "rename"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "WorkspaceFolder": {
            "properties": {
                "name": {
                    "description": "The name of the workspace folder. Used to refer to this\nworkspace folder in the user interface.",
                    "type": "string"
                },
                "uri": {
                    "description": "The associated URI for this workspace folder.",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "WorkspaceFoldersClientCapabilities": {
            "properties": {
                "workspace": {
                    "description": "The workspace client capabilities",
                    "properties": {
                        "workspaceFolders": {
                            "description": "The client has support for workspace folders",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "WorkspaceFoldersInitializeParams": {
            "properties": {
                "workspaceFolders": {
                    "description": "The actual configured workspace folders.",
                    "items": {
                        "$ref": "#/definitions/WorkspaceFolder"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "WorkspaceFoldersServerCapabilities": {
            "properties": {
                "workspace": {
                    "description": "The workspace server capabilities",
                    "properties": {
                        "workspaceFolders": {
                            "properties": {
                                "changeNotifications": {
                                    "description": "Whether the server wants to receive workspace folder\nchange notifications.\n\nIf a strings is provided the string is treated as a ID\nunder which the notification is registed on the client\nside. The ID can be used to unregister for these events\nusing the `client/unregisterCapability` request.",
                                    "type": [
                                        "string",
                                        "boolean"
                                    ]
                                },
                                "supported": {
                                    "description": "The Server has support for workspace folders",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "WorkspaceSymbolClientCapabilities": {
            "description": "Client capabilities for a [WorkspaceSymbolRequest](#WorkspaceSymbolRequest).",
            "properties": {
                "dynamicRegistration": {
                    "description": "Symbol request supports dynamic registration.",
                    "type": "boolean"
                },
                "symbolKind": {
                    "description": "Specific capabilities for the `SymbolKind` in the `workspace/symbol` request.",
                    "properties": {
                        "valueSet": {
                            "description": "The symbol kind values the client supports. When this\nproperty exists the client also guarantees that it will\nhandle values outside its set gracefully and falls back\nto a default value when unknown.\n\nIf this property is not present the client only supports\nthe symbol kinds from `File` to `Array` as defined in\nthe initial version of the protocol.",
                            "items": {
                                "enum": [
                                    1,
                                    10,
                                    11,
                                    12,
                                    13,
                                    14,
                                    15,
                                    16,
                                    17,
                                    18,
                                    19,
                                    2,
                                    20,
                                    21,
                                    22,
                                    23,
                                    24,
                                    25,
                                    26,
                                    3,
                                    4,
                                    5,
                                    6,
                                    7,
                                    8,
                                    9
                                ],
                                "type": "number"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "WorkspaceSymbolOptions": {
            "description": "Server capabilities for a [WorkspaceSymbolRequest](#WorkspaceSymbolRequest).",
            "properties": {
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "WorkspaceSymbolParams": {
            "description": "The parameters of a [WorkspaceSymbolRequest](#WorkspaceSymbolRequest).",
            "properties": {
                "partialResultToken": {
                    "description": "An optional token that a server can use to report partial results (e.g. streaming) to\nthe client.",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "query": {
                    "description": "A query string to filter symbols by. Clients may send an empty\nstring here to request all symbols.",
                    "type": "string"
                },
                "workDoneToken": {
                    "description": "An optional token that a server can use to report work done progress.",
                    "type": [
                        "string",
                        "number"
                    ]
                }
            },
            "type": "object"
        },
        "WorkspaceSymbolRegistrationOptions": {
            "description": "Registration options for a [WorkspaceSymbolRequest](#WorkspaceSymbolRequest).",
            "properties": {
                "workDoneProgress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "_ClientCapabilities": {
            "description": "Defines the capabilities provided by the client.",
            "properties": {
                "experimental": {
                    "additionalProperties": true,
                    "description": "Experimental client capabilities.",
                    "properties": {
                    },
                    "type": "object"
                },
                "textDocument": {
                    "$ref": "#/definitions/TextDocumentClientCapabilities",
                    "description": "Text document specific client capabilities."
                },
                "window": {
                    "additionalProperties": true,
                    "description": "Window specific client capabilities.",
                    "properties": {
                    },
                    "type": "object"
                },
                "workspace": {
                    "$ref": "#/definitions/WorkspaceClientCapabilities",
                    "description": "Workspace specific client capabilities."
                }
            },
            "type": "object"
        },
        "_InitializeParams": {
            "description": "The initialize parameters",
            "properties": {
                "capabilities": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/_ClientCapabilities"
                        },
                        {
                            "$ref": "#/definitions/WorkspaceFoldersClientCapabilities"
                        },
                        {
                            "$ref": "#/definitions/ConfigurationClientCapabilities"
                        },
                        {
                            "$ref": "#/definitions/WorkDoneProgressClientCapabilities"
                        }
                    ],
                    "description": "The capabilities provided by the client (editor or tool)"
                },
                "clientInfo": {
                    "description": "Information about the client",
                    "properties": {
                        "name": {
                            "description": "The name of the client as defined by the client.",
                            "type": "string"
                        },
                        "version": {
                            "description": "The client's version as defined by the client.",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "initializationOptions": {
                    "description": "User provided initialization options."
                },
                "processId": {
                    "description": "The process Id of the parent process that started\nthe server.",
                    "type": "number"
                },
                "rootPath": {
                    "description": "The rootPath of the workspace. Is null\nif no folder is open.",
                    "type": "string"
                },
                "rootUri": {
                    "description": "The rootUri of the workspace. Is null if no\nfolder is open. If both `rootPath` and `rootUri` are set\n`rootUri` wins.",
                    "type": "string"
                },
                "trace": {
                    "description": "The initial trace setting. If omitted trace is disabled ('off').",
                    "enum": [
                        "messages",
                        "off",
                        "verbose"
                    ],
                    "type": "string"
                },
                "workDoneToken": {
                    "description": "An optional token that a server can use to report work done progress.",
                    "type": [
                        "string",
                        "number"
                    ]
                }
            },
            "type": "object"
        },
        "_ServerCapabilities": {
            "description": "Defines the capabilities provided by a language\nserver.",
            "properties": {
                "codeActionProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/CodeActionOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides code actions. CodeActionOptions may only be\nspecified if the client states that it supports\n`codeActionLiteralSupport` in its initial `initialize` request."
                },
                "codeLensProvider": {
                    "$ref": "#/definitions/CodeLensOptions",
                    "description": "The server provides code lens."
                },
                "colorProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/DocumentColorOptions"
                        },
                        {
                            "$ref": "#/definitions/DocumentColorRegistrationOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides color provider support."
                },
                "completionProvider": {
                    "$ref": "#/definitions/CompletionOptions",
                    "description": "The server provides completion support."
                },
                "declarationProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/DeclarationOptions"
                        },
                        {
                            "$ref": "#/definitions/DeclarationRegistrationOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides Goto Declaration support."
                },
                "definitionProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/DefinitionOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides goto definition support."
                },
                "documentFormattingProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/DocumentFormattingOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides document formatting."
                },
                "documentHighlightProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/DocumentHighlightOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides document highlight support."
                },
                "documentLinkProvider": {
                    "$ref": "#/definitions/DocumentLinkOptions",
                    "description": "The server provides document link support."
                },
                "documentOnTypeFormattingProvider": {
                    "$ref": "#/definitions/DocumentOnTypeFormattingOptions",
                    "description": "The server provides document formatting on typing."
                },
                "documentRangeFormattingProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/DocumentRangeFormattingOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides document range formatting."
                },
                "documentSymbolProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/DocumentSymbolOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides document symbol support."
                },
                "executeCommandProvider": {
                    "$ref": "#/definitions/ExecuteCommandOptions",
                    "description": "The server provides execute command support."
                },
                "experimental": {
                    "$ref": "#/definitions/T",
                    "description": "Experimental server capabilities."
                },
                "foldingRangeProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/FoldingRangeOptions"
                        },
                        {
                            "$ref": "#/definitions/FoldingRangeRegistrationOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides folding provider support."
                },
                "hoverProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/HoverOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides hover support."
                },
                "implementationProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ImplementationOptions"
                        },
                        {
                            "$ref": "#/definitions/ImplementationRegistrationOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides Goto Implementation support."
                },
                "referencesProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ReferenceOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides find references support."
                },
                "renameProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/RenameOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides rename support. RenameOptions may only be\nspecified if the client states that it supports\n`prepareSupport` in its initial `initialize` request."
                },
                "selectionRangeProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/SelectionRangeOptions"
                        },
                        {
                            "$ref": "#/definitions/SelectionRangeRegistrationOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides selection range support."
                },
                "signatureHelpProvider": {
                    "$ref": "#/definitions/SignatureHelpOptions",
                    "description": "The server provides signature help support."
                },
                "textDocumentSync": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/TextDocumentSyncOptions"
                        },
                        {
                            "enum": [
                                0,
                                1,
                                2
                            ],
                            "type": "number"
                        }
                    ],
                    "description": "Defines how text documents are synced. Is either a detailed structure defining each notification or\nfor backwards compatibility the TextDocumentSyncKind number."
                },
                "typeDefinitionProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/TypeDefinitionOptions"
                        },
                        {
                            "$ref": "#/definitions/TypeDefinitionRegistrationOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides Goto Type Definition support."
                },
                "workspaceSymbolProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/WorkspaceSymbolOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides workspace symbol support."
                }
            },
            "type": "object"
        },
        "_ServerCapabilities<T>": {
            "description": "Defines the capabilities provided by a language\nserver.",
            "properties": {
                "codeActionProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/CodeActionOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides code actions. CodeActionOptions may only be\nspecified if the client states that it supports\n`codeActionLiteralSupport` in its initial `initialize` request."
                },
                "codeLensProvider": {
                    "$ref": "#/definitions/CodeLensOptions",
                    "description": "The server provides code lens."
                },
                "colorProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/DocumentColorOptions"
                        },
                        {
                            "$ref": "#/definitions/DocumentColorRegistrationOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides color provider support."
                },
                "completionProvider": {
                    "$ref": "#/definitions/CompletionOptions",
                    "description": "The server provides completion support."
                },
                "declarationProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/DeclarationOptions"
                        },
                        {
                            "$ref": "#/definitions/DeclarationRegistrationOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides Goto Declaration support."
                },
                "definitionProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/DefinitionOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides goto definition support."
                },
                "documentFormattingProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/DocumentFormattingOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides document formatting."
                },
                "documentHighlightProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/DocumentHighlightOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides document highlight support."
                },
                "documentLinkProvider": {
                    "$ref": "#/definitions/DocumentLinkOptions",
                    "description": "The server provides document link support."
                },
                "documentOnTypeFormattingProvider": {
                    "$ref": "#/definitions/DocumentOnTypeFormattingOptions",
                    "description": "The server provides document formatting on typing."
                },
                "documentRangeFormattingProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/DocumentRangeFormattingOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides document range formatting."
                },
                "documentSymbolProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/DocumentSymbolOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides document symbol support."
                },
                "executeCommandProvider": {
                    "$ref": "#/definitions/ExecuteCommandOptions",
                    "description": "The server provides execute command support."
                },
                "experimental": {
                    "$ref": "#/definitions/T_1",
                    "description": "Experimental server capabilities."
                },
                "foldingRangeProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/FoldingRangeOptions"
                        },
                        {
                            "$ref": "#/definitions/FoldingRangeRegistrationOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides folding provider support."
                },
                "hoverProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/HoverOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides hover support."
                },
                "implementationProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ImplementationOptions"
                        },
                        {
                            "$ref": "#/definitions/ImplementationRegistrationOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides Goto Implementation support."
                },
                "referencesProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ReferenceOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides find references support."
                },
                "renameProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/RenameOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides rename support. RenameOptions may only be\nspecified if the client states that it supports\n`prepareSupport` in its initial `initialize` request."
                },
                "selectionRangeProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/SelectionRangeOptions"
                        },
                        {
                            "$ref": "#/definitions/SelectionRangeRegistrationOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides selection range support."
                },
                "signatureHelpProvider": {
                    "$ref": "#/definitions/SignatureHelpOptions",
                    "description": "The server provides signature help support."
                },
                "textDocumentSync": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/TextDocumentSyncOptions"
                        },
                        {
                            "enum": [
                                0,
                                1,
                                2
                            ],
                            "type": "number"
                        }
                    ],
                    "description": "Defines how text documents are synced. Is either a detailed structure defining each notification or\nfor backwards compatibility the TextDocumentSyncKind number."
                },
                "typeDefinitionProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/TypeDefinitionOptions"
                        },
                        {
                            "$ref": "#/definitions/TypeDefinitionRegistrationOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides Goto Type Definition support."
                },
                "workspaceSymbolProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/WorkspaceSymbolOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides workspace symbol support."
                }
            },
            "type": "object"
        },
        "_ServerCapabilities<T>_1": {
            "description": "Defines the capabilities provided by a language\nserver.",
            "properties": {
                "codeActionProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/CodeActionOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides code actions. CodeActionOptions may only be\nspecified if the client states that it supports\n`codeActionLiteralSupport` in its initial `initialize` request."
                },
                "codeLensProvider": {
                    "$ref": "#/definitions/CodeLensOptions",
                    "description": "The server provides code lens."
                },
                "colorProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/DocumentColorOptions"
                        },
                        {
                            "$ref": "#/definitions/DocumentColorRegistrationOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides color provider support."
                },
                "completionProvider": {
                    "$ref": "#/definitions/CompletionOptions",
                    "description": "The server provides completion support."
                },
                "declarationProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/DeclarationOptions"
                        },
                        {
                            "$ref": "#/definitions/DeclarationRegistrationOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides Goto Declaration support."
                },
                "definitionProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/DefinitionOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides goto definition support."
                },
                "documentFormattingProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/DocumentFormattingOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides document formatting."
                },
                "documentHighlightProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/DocumentHighlightOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides document highlight support."
                },
                "documentLinkProvider": {
                    "$ref": "#/definitions/DocumentLinkOptions",
                    "description": "The server provides document link support."
                },
                "documentOnTypeFormattingProvider": {
                    "$ref": "#/definitions/DocumentOnTypeFormattingOptions",
                    "description": "The server provides document formatting on typing."
                },
                "documentRangeFormattingProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/DocumentRangeFormattingOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides document range formatting."
                },
                "documentSymbolProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/DocumentSymbolOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides document symbol support."
                },
                "executeCommandProvider": {
                    "$ref": "#/definitions/ExecuteCommandOptions",
                    "description": "The server provides execute command support."
                },
                "experimental": {
                    "$ref": "#/definitions/T_2",
                    "description": "Experimental server capabilities."
                },
                "foldingRangeProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/FoldingRangeOptions"
                        },
                        {
                            "$ref": "#/definitions/FoldingRangeRegistrationOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides folding provider support."
                },
                "hoverProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/HoverOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides hover support."
                },
                "implementationProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ImplementationOptions"
                        },
                        {
                            "$ref": "#/definitions/ImplementationRegistrationOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides Goto Implementation support."
                },
                "referencesProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ReferenceOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides find references support."
                },
                "renameProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/RenameOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides rename support. RenameOptions may only be\nspecified if the client states that it supports\n`prepareSupport` in its initial `initialize` request."
                },
                "selectionRangeProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/SelectionRangeOptions"
                        },
                        {
                            "$ref": "#/definitions/SelectionRangeRegistrationOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides selection range support."
                },
                "signatureHelpProvider": {
                    "$ref": "#/definitions/SignatureHelpOptions",
                    "description": "The server provides signature help support."
                },
                "textDocumentSync": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/TextDocumentSyncOptions"
                        },
                        {
                            "enum": [
                                0,
                                1,
                                2
                            ],
                            "type": "number"
                        }
                    ],
                    "description": "Defines how text documents are synced. Is either a detailed structure defining each notification or\nfor backwards compatibility the TextDocumentSyncKind number."
                },
                "typeDefinitionProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/TypeDefinitionOptions"
                        },
                        {
                            "$ref": "#/definitions/TypeDefinitionRegistrationOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides Goto Type Definition support."
                },
                "workspaceSymbolProvider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/WorkspaceSymbolOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "description": "The server provides workspace symbol support."
                }
            },
            "type": "object"
        }
    }
}

